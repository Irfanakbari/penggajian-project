'use client'

import {Breadcrumb, message, Table} from "antd";
import React, {Key, useEffect, useState} from "react";
import {IoMdRefresh} from "react-icons/io";
import ToolbarWrapper from "@/app/components/ToolbarWrapper";
import ButtonToolbar from "@/app/components/ButtonToolbar";
import dayjs from "dayjs";
import {getSalary, Salary} from "@/app/db/queries/salary";
import AddSalary from "@/app/components/server_component/salary/add_modal";
import {BlobProvider} from "@react-pdf/renderer";
import SalarySlip from "@/app/components/client_component/salary_slip";
import {DownloadOutlined} from "@ant-design/icons";
import {useAuth} from "@/app/contexts/AuthContext";

const SalaryUser = () => {
    const [data, setData] = useState<Salary[]>([]);
    const [messageApi, contextHolder] = message.useMessage();
    const [modalOpen, setModalOpen] = useState(false);
    const [loading, setLoading] = useState(true);
    const [selectedRows, setSelectedRows] = useState<Salary[]>([]);
    const { nik} = useAuth();

    useEffect(() => {
        fetchData();
    }, []);

    const fetchData = async () => {
        try {
            setLoading(true);
            const response = await getSalary(nik);
            setData(response);
        } catch (error) {
            messageApi.open({
                type: "error",
                content: "Gagal Mendapatkan Data",
            });
        } finally {
            setLoading(false);
        }
    };


    const rowSelection = {
        onChange: (selectedRowKeys: Key[], selectedRows: Salary[]) => {
            setSelectedRows(selectedRows);
        },
        getCheckboxProps: (record: Salary) => ({
            kode: record.id,
            disabled: false,
        }),
    };

    const columns = [
        {
            title: "NIK",
            dataIndex: "karyawanNik",
            key: "nik",
        },
        {
            title: "Month",
            dataIndex: "month",
            key: "month",
            render: (date: any) => dayjs(date).format("MMM YYYY"),
        },
        {
            title: "Base Salary",
            dataIndex: "baseSalary",
            key: "baseSalary",
            render: (value: any) => `Rp ${value.toLocaleString()}`,
        },
        {
            title: "Absent",
            dataIndex: "absenDeduction",
            key: "absenDeduction",
            render: (value: any) => `Rp ${value.toLocaleString()}`,
        },
        {
            title: "Bonus",
            dataIndex: "bonusSalary",
            key: "bonusSalary",
            render: (value: any) => `Rp ${value.toLocaleString()}`,
        },
        {
            title: "Food Allowance",
            dataIndex: "foodSalary",
            key: "foodSalary",
            render: (value: any) => `Rp ${value.toLocaleString()}`,
        },
        {
            title: "PPH Deduction",
            dataIndex: "pphSalary",
            key: "pphSalary",
            render: (value: any) => `Rp ${value.toLocaleString()}`,
        },
        {
            title: "Loan",
            dataIndex: "loan",
            key: "loan",
            render: (value: any) => `Rp ${value.toLocaleString()}`,
        },
        {
            title: "Total Work Days",
            dataIndex: "totalDayWork",
            key: "totalDayWork",
        },
        {
            title: "Total Tidak Hadir",
            key: "absenTotal",
            // dataIndex: "totalSick",
            render: (value: any) => `${(value.totalOff).toLocaleString()} Hari`,
        },
        {
            title: "Total Salary",
            dataIndex: "totalSalary",
            key: "totalSalary",
            render: (value: any) => `Rp ${value.toLocaleString()}`,
        },
        {
            title: "Generated By",
            dataIndex: "generatedBy",
            key: "generatedBy",
        },
        {
            title: "Created At",
            dataIndex: "createdAt",
            key: "createdAt",
            render: (date: any) => dayjs(date).format("DD MMM YYYY"),
        },
    ];

    return (
        <div>
            {contextHolder}
            <AddSalary modalOpen={modalOpen} setModalOpen={setModalOpen} fetchData={fetchData} />
            <Breadcrumb
                items={[
                    {
                        title: "Master",
                    },
                    {
                        title: "Salary",
                    },
                ]}
            />
            <ToolbarWrapper>
                <ButtonToolbar title={"Refresh"} icon={<IoMdRefresh size={16} />} onClick={() => fetchData()} />
                {selectedRows.length > 0 && (
                    <BlobProvider document={<SalarySlip {...selectedRows[0]} />}>
                        {({ url, loading }) => {
                            if (loading) {
                                return <ButtonToolbar title={"Generating PDF..."} icon={<DownloadOutlined />} />;
                            }
                            return url ? (
                                <a href={url} download={`SalarySlip-${selectedRows[0].id}.pdf`}>
                                    <ButtonToolbar
                                        enable={selectedRows.length > 0}
                                        title={"Download Slip"}
                                        icon={<DownloadOutlined />}
                                        onClick={() => null}
                                    />
                                </a>
                            ) : (
                                <ButtonToolbar title={"No PDF available"} icon={<DownloadOutlined />} />
                            );
                        }}
                    </BlobProvider>
                )}
            </ToolbarWrapper>
            <Table
                rowSelection={{
                    type: "radio",
                    ...rowSelection,
                }}
                scroll={{ y: "62vh" }}
                pagination={false}
                loading={loading}
                size={"small"}
                dataSource={data}
                columns={columns}
                rowKey={"id"}
            />
        </div>
    );
};

export default SalaryUser;
